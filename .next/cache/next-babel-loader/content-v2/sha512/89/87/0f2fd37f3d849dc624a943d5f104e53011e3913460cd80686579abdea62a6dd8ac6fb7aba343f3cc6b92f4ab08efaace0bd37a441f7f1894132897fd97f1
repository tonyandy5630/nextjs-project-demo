{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from \"react\";\nimport MeetUpDetail from \"../components/meetups/MeetUpDetail\";\nimport { MongoClient } from \"mongodb\";\nimport { ObjectId } from \"mongodb\";\nimport Head from \"next/head\";\n\nconst MeetUpDetails = props => {\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsxs(Head, {\n      children: [/*#__PURE__*/_jsx(\"title\", {\n        children: props.meetupData.title\n      }), /*#__PURE__*/_jsx(\"meta\", {\n        name: \"description\",\n        content: props.meetupData.description\n      })]\n    }), /*#__PURE__*/_jsx(MeetUpDetail, {\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description,\n      image: props.meetupData.image\n    })]\n  });\n};\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect(\"mongodb+srv://tonyandy5630:20112001Tu@cluster0.nm3nnu4.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupCollection = db.collection(\"meetups\");\n  const meetups = await meetupCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupid: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupid;\n  let selectedMeetup = {\n    meetupData: {\n      title: \"First Meetup\",\n      image: \"https://media.architecturaldigest.com/photos/61e048de019f04fb96929319/4:3/w_3864,h_2898,c_limit/AD0222_PRESERVATION_LALBAUGH_1.jpg\",\n      address: \"Some address\",\n      description: \"This is a test\"\n    }\n  };\n\n  try {\n    const client = await MongoClient.connect(\"mongodb+srv://tonyandy5630:20112001Tu@cluster0.nm3nnu4.mongodb.net/meetups?retryWrites=true&w=majority\");\n    const db = client.db();\n    const meetupCollection = db.collection(\"meetups\");\n    selectedMeetup = await meetupCollection.findOne({\n      _id: ObjectId(meetupId)\n    });\n    client.close();\n  } catch (error) {\n    console.log(error);\n  }\n\n  return {\n    props: {\n      meetupData: {\n        title: selectedMeetup.title,\n        image: selectedMeetup.image,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description\n      }\n    }\n  };\n}\nexport default MeetUpDetails;","map":null,"metadata":{},"sourceType":"module"}